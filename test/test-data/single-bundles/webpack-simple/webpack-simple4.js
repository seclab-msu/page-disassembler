/*! For license information please see client.js.LICENSE.txt */
(() => {
  var e = {669: (e, t, n) => {
    e.exports = n(609);
  },
  592: (e, t, n) => {
    "use strict";
    var r = n(867),
      a = n(26),
      l = n(372),
      o = n(327),
      i = n(97),
      u = n(109),
      s = n(985),
      c = n(61);
    e.exports = function (e) {
      return new Promise(function (t, n) {
        var f = e.data,
          d = e.headers;
        r.isFormData(f) && delete d["Content-Type"];
        var p = new XMLHttpRequest();
        if (e.auth) {
          var h = e.auth.username || "",
            m = e.auth.password
              ? unescape(encodeURIComponent(e.auth.password))
              : "";
          d.Authorization = "Basic " + btoa(h + ":" + m);
        }
        var g = i(e.baseURL, e.url);
        if (
          (p.open(
            e.method.toUpperCase(),
            o(g, e.params, e.paramsSerializer),
            !0
          ),
          (p.timeout = e.timeout),
          (p.onreadystatechange = function () {
            if (
              p &&
              4 === p.readyState &&
              (0 !== p.status ||
                (p.responseURL && 0 === p.responseURL.indexOf("file:")))
            ) {
              var r =
                  "getAllResponseHeaders" in p
                    ? u(p.getAllResponseHeaders())
                    : null,
                l = {
                  data:
                    e.responseType && "text" !== e.responseType
                      ? p.response
                      : p.responseText,
                  status: p.status,
                  statusText: p.statusText,
                  headers: r,
                  config: e,
                  request: p,
                };
              a(t, n, l), (p = null);
            }
          }),
          (p.onabort = function () {
            p &&
              (n(c("Request aborted", e, "ECONNABORTED", p)), (p = null));
          }),
          (p.onerror = function () {
            n(c("Network Error", e, null, p)), (p = null);
          }),
          (p.ontimeout = function () {
            var t = "timeout of " + e.timeout + "ms exceeded";
            e.timeoutErrorMessage && (t = e.timeoutErrorMessage),
              n(c(t, e, "ECONNABORTED", p)),
              (p = null);
          }),
          r.isStandardBrowserEnv())
        ) {
          var y =
            (e.withCredentials || s(g)) && e.xsrfCookieName
              ? l.read(e.xsrfCookieName)
              : void 0;
          y && (d[e.xsrfHeaderName] = y);
        }
        if (
          ("setRequestHeader" in p &&
            r.forEach(d, function (e, t) {
              void 0 === f && "content-type" === t.toLowerCase()
                ? delete d[t]
                : p.setRequestHeader(t, e);
            }),
          r.isUndefined(e.withCredentials) ||
            (p.withCredentials = !!e.withCredentials),
          e.responseType)
        )
          try {
            p.responseType = e.responseType;
          } catch (t) {
            if ("json" !== e.responseType) throw t;
          }
        "function" == typeof e.onDownloadProgress &&
          p.addEventListener("progress", e.onDownloadProgress),
          "function" == typeof e.onUploadProgress &&
            p.upload &&
            p.upload.addEventListener("progress", e.onUploadProgress),
          e.cancelToken &&
            e.cancelToken.promise.then(function (e) {
              p && (p.abort(), n(e), (p = null));
            }),
          f || (f = null),
          p.send(f);
      });
    };
  },
  609: (e, t, n) => {
    "use strict";
    var r = n(867),
      a = n(849),
      l = n(321),
      o = n(185);
    function i(e) {
      var t = new l(e),
        n = a(l.prototype.request, t);
      return r.extend(n, l.prototype, t), r.extend(n, t), n;
    }
    var u = i(n(655));
    (u.Axios = l),
      (u.create = function (e) {
        return i(o(u.defaults, e));
      }),
      (u.Cancel = n(263)),
      (u.CancelToken = n(972)),
      (u.isCancel = n(502)),
      (u.all = function (e) {
        return Promise.all(e);
      }),
      (u.spread = n(713)),
      (u.isAxiosError = n(268)),
      (e.exports = u),
      (e.exports.default = u);
  }},
    t = {};
  function n(r) {
    var a = t[r];
    if (void 0 !== a) return a.exports;
    var l = (t[r] = { exports: {} });
    return e[r](l, l.exports, n), l.exports;
  }
  (() => {
    const e = n(294),
      t = n(935),
      r = n(697),
      a = n(669);
    function l(e) {
      const t = new Uint8Array(e.length / 2);
      for (let n = 0; n < e.length; n += 2)
        t[n / 2] = parseInt(e.charAt(n) + e.charAt(n + 1), 16);
      return t;
    }
    class o extends e.Component {
      constructor(e) {
        super(e), (this.state = {});
      }
      render() {
        return window.location.pathname.startsWith("/download") &&
          window.location.pathname.match(/^\/downLOad\/([^/]+)\/$/i)
          ? e.createElement(g, {
              fileID: window.location.pathname.match(
                /^\/downLOad\/([^/]+)\/$/i
              )[1],
              secretKey: window.location.hash.substr(1),
            })
          : e.createElement(d, null);
      }
    }
    class i extends e.Component {
      constructor(e) {
        super(e),
          this.props.errorMessage
            ? (this.errorMessage = this.props.errorMessage)
            : (this.errorMessage = ""),
          (this.state = {});
      }
      goHome() {
        window.location.href = "/";
      }
      render() {
        return e.createElement(
          "div",
          { className: "header-info" },
          e.createElement(
            "div",
            null,
            e.createElement("h1", null, "Error"),
            e.createElement(
              "p",
              null,
              e.createElement("img", {
                className: "one-em-bottom",
                src: "/linkexpired.svg",
                style: { float: "right" },
              })
            ),
            e.createElement("p", null, "An error has occurred."),
            e.createElement("div", null, this.errorMessage),
            e.createElement(
              "div",
              { className: "text-center btn-width" },
              e.createElement(
                "button",
                {
                  type: "button",
                  className: "btn btn-primary btn-block",
                  onClick: () => this.goHome(),
                },
                "Start Again"
              )
            )
          )
        );
      }
    }
    i.propTypes = { errorMessage: r.string };
    class u extends e.Component {
      constructor(e) {
        super(e);
        var t = this.props.downloadURL + "#" + this.props.secretKey;
        (this.state = { fullURL: t }), (this.copy = this.copy.bind(this));
      }
      goHome() {
        window.location.href = "/";
      }
      copy(e, t) {
        (e.target.style.backgroundColor = "#39BF7C"),
          (e.target.style.color = "#fff"),
          (function (e) {
            const t = document.createElement("input");
            if (
              (t.setAttribute("value", e),
              (t.contentEditable = !0),
              (t.readOnly = !0),
              document.body.appendChild(t),
              navigator.userAgent.match(/iphone|ipad|ipod/i))
            ) {
              const n = document.createRange();
              n.selectNodeContents(t);
              const r = window.getSelection();
              r.removeAllRanges(),
                r.addRange(n),
                t.setSelectionRange(0, e.length);
            } else t.select();
            document.execCommand("copy");
            document.body.removeChild(t);
          })(t);
      }
      deleteFile() {
        var e = { delete_token: this.props.deleteToken };
        a.post(`/api/delete/${this.props.id}`, e)
          .then(this.goHome())
          .catch(() =>
            this.setState({
              errorMessage: "500 server error.",
              action: "error",
            })
          );
      }
      render() {
        return e.createElement(
          "div",
          { className: "download-link" },
          e.createElement(
            "div",
            { className: "header-info" },
            e.createElement(
              "h2",
              null,
              "The link to your message will expire after 1 download or in 7 days."
            )
          ),
          e.createElement(
            "div",
            { className: "info" },
            e.createElement(
              "h4",
              null,
              "Copy and share this link to send your message."
            )
          ),
          e.createElement(
            "div",
            { className: "input-group" },
            e.createElement("input", {
              type: "text",
              className: "form-control",
              value: this.state.fullURL,
              readOnly: !0,
            }),
            e.createElement(
              "div",
              { className: "input-group-append" },
              e.createElement(
                "button",
                {
                  className: "btn btn-outline-primary",
                  type: "button",
                  onClick: (e) => this.copy(e, this.state.fullURL),
                },
                "Copy to clipboard"
              )
            )
          ),
          e.createElement(
            "div",
            null,
            e.createElement(
              "div",
              { className: "info" },
              e.createElement("h4", null, "Copy and share this passphrase."),
              " ",
              e.createElement(
                "p",
                null,
                "Send it through a different channel. For example, if you send the link through email, then send the passphrase through text message, a phone call, or slack."
              )
            ),
            e.createElement(
              "div",
              { className: "input-group" },
              e.createElement("input", {
                type: "text",
                className: "form-control",
                value: this.props.passPhrase,
                readOnly: !0,
              }),
              e.createElement(
                "div",
                { className: "input-group-append" },
                e.createElement(
                  "button",
                  {
                    className: "btn btn-outline-primary",
                    type: "button",
                    onClick: (e) => this.copy(e, this.props.passPhrase),
                  },
                  "Copy to clipboard"
                )
              )
            )
          ),
          e.createElement(
            "div",
            { className: "info" },
            e.createElement(
              "button",
              {
                className: "btn btn-primary",
                type: "button",
                onClick: () => this.goHome(),
              },
              "Send Another"
            ),
            e.createElement(
              "button",
              {
                className: "btn btn-primary float-right",
                type: "button",
                onClick: () => this.deleteFile(),
              },
              "Delete File"
            )
          )
        );
      }
    }
    u.propTypes = {
      downloadURL: r.string,
      secretKey: r.string,
      passPhrase: r.string,
      deleteToken: r.string,
      id: r.string,
    };
    class s extends e.Component {
      constructor(e) {
        super(e);
      }
      goHome() {
        window.location.href = "/";
      }
      render() {
        return e.createElement(
          "div",
          null,
          e.createElement(
            "div",
            { className: "header-info" },
            e.createElement(
              "h1",
              null,
              "This link has expired or never existed in the first place!"
            )
          ),
          e.createElement(
            "div",
            { className: "image-box" },
            e.createElement(
              "p",
              null,
              e.createElement("img", {
                src: "/linkexpired.svg",
                style: { float: "right" },
              })
            ),
            e.createElement(
              "p",
              null,
              "SendSafe lets you send files through a safe, private, and encrypted link that automatically expires to ensure your stuff does not remain online forever."
            )
          ),
          e.createElement(
            "div",
            null,
            e.createElement(
              "button",
              {
                className: "btn btn-primary",
                type: "button",
                onClick: () => this.goHome(),
              },
              "Send Another"
            )
          )
        );
      }
    }
    class c extends e.Component {
      constructor(e) {
        super(e), (this.state = this.calculate());
      }
      calculate() {
        var e = 2 * Math.PI * 54;
        return {
          dashoffset: e * (1 - this.props.percent / 100),
          CIRCUMFERENCE: e,
        };
      }
      componentWillReceiveProps() {
        this.setState(this.calculate());
      }
      render() {
        return e.createElement(
          "div",
          { className: "header-info" },
          e.createElement("h1", null, "Progress"),
          e.createElement(
            "div",
            { className: "c-progress-bar" },
            e.createElement(
              "svg",
              {
                className: "c-progress",
                width: "120",
                height: "120",
                viewBox: "0 0 120 120",
              },
              e.createElement("circle", {
                className: "progress__meter",
                cx: "60",
                cy: "60",
                r: "54",
                strokeWidth: "12",
              }),
              e.createElement("circle", {
                className: "progress__value",
                cx: "60",
                cy: "60",
                r: "54",
                strokeWidth: "12",
                strokeDashoffset: this.state.dashoffset,
                strokeDasharray: this.state.CIRCUMFERENCE,
              })
            ),
            e.createElement(
              "div",
              { className: "percentage text-center" },
              e.createElement(
                "span",
                { className: "percent-number" },
                this.props.percent
              ),
              e.createElement("span", { className: "percent-sign" }, "%")
            ),
            e.createElement(
              "div",
              { className: "percentText text-center" },
              e.createElement("h4", null, this.props.message)
            )
          )
        );
      }
    }
    c.propTypes = { percent: r.number, message: r.string };
    class f extends e.Component {
      constructor(e) {
        super(e),
          (this.state = {
            dropclass: "upload-window",
            textValue: "",
            errorMessage: "",
          }),
          (this.handleTextChange = this.handleTextChange.bind(this)),
          (this.handleUploadText = this.handleUploadText.bind(this)),
          (this.handleFileChange = this.handleFileChange.bind(this)),
          (this.handleOnDrop = this.handleOnDrop.bind(this)),
          (this.handleOnDragOver = this.handleOnDragOver.bind(this));
      }
      handleTextChange(e) {
        this.setState({ textValue: e.target.value });
      }
      handleUploadText() {
        const e = new File([this.state.textValue], "Private Message", {
          type: "text/plain",
        });
        this.props.encryptAndUpload(e);
      }
      handleFileChange(e) {
        var t = e.target.files;
        this.uploadFile(t);
      }
      uploadFile(e) {
        0 === e.length
          ? this.setState({ errorMessage: "No Files" })
          : e.length > 1
          ? this.setState({ errorMessage: "Multiple files not supported" })
          : this.props.encryptAndUpload(e[0]);
      }
      handleOnDrop(e) {
        e.preventDefault();
        var t = e.dataTransfer.files;
        this.uploadFile(t);
      }
      handleOnDragOver(e) {
        e.preventDefault();
      }
      render() {
        return e.createElement(
          "div",
          null,
          e.createElement(
            "div",
            { className: "header-info" },
            e.createElement("h1", null, "Private, Encrypted Sharing"),
            e.createElement(
              "p",
              null,
              "Send files or text through a safe, private, and encrypted link that automatically expires to ensure your stuff does not remain online forever."
            )
          ),
          e.createElement(
            "div",
            null,
            e.createElement("h4", null, this.state.errorMessage)
          ),
          e.createElement(
            "div",
            { className: "outline " },
            e.createElement("h2", null, "Share Text"),
            e.createElement(
              "div",
              { className: "form-group" },
              e.createElement("textarea", {
                className: "form-control",
                id: "textInput",
                rows: "3",
                placeholder: "my secret text",
                onChange: this.handleTextChange,
              })
            ),
            e.createElement(
              "div",
              { className: "btn-width" },
              e.createElement(
                "button",
                {
                  type: "button",
                  className: "btn btn-primary btn-block",
                  onClick: this.handleUploadText,
                },
                "Protect and Send Text"
              )
            )
          ),
          e.createElement(
            "div",
            { className: "text-center" },
            e.createElement("h2", null, "OR")
          ),
          e.createElement(
            "div",
            {
              className: "outline " + this.state.dropclass,
              draggable: "true",
              onDrop: (e) => {
                this.handleOnDrop(e);
              },
              onDragOver: (e) => {
                this.setState({ dropclass: "upload-window-ondrag" }),
                  this.handleOnDragOver(e);
              },
              onDragLeave: () => this.setState({ dropclass: "upload-window" }),
              onClick: () => this.fileUploader.click(),
            },
            e.createElement("h2", null, "Share Files"),
            e.createElement(
              "div",
              { className: "text-right" },
              e.createElement("img", {
                src: "upload.svg",
                title: "uplaod",
                align: "right",
                style: { paddingLeft: ".75rem" },
              })
            ),
            e.createElement(
              "div",
              { style: { height: "93px" } },
              e.createElement(
                "h5",
                null,
                e.createElement(
                  "em",
                  null,
                  "Drop your file here to start uploading... "
                )
              )
            ),
            e.createElement("input", {
              type: "file",
              style: { display: "none" },
              onChange: (e) => this.handleFileChange(e),
              ref: (e) => (this.fileUploader = e),
            }),
            e.createElement(
              "div",
              { className: "form-group" },
              e.createElement(
                "button",
                {
                  type: "file",
                  className: "btn btn-primary btn-block btn-width",
                },
                "Select files to upload"
              )
            )
          )
        );
      }
    }
    f.propTypes = { encryptAndUpload: r.func };
    class d extends e.Component {
      constructor(e) {
        super(e),
          (this.state = {
            action: "index",
            percent: 0,
            textValue: "",
            message: "",
            errorMessage: "",
          }),
          (this.encryptAndUpload = this.encryptAndUpload.bind(this)),
          (this.handleProgressUpdate = this.handleProgressUpdate.bind(this));
      }
      async encrypt(e) {
        this.setState({ message: "Importing..." });
        var t = { file: e },
          n = await new Promise((e, n) => {
            const r = new FileReader();
            r.readAsArrayBuffer(t.file),
              (r.onload = function () {
                const t = new Uint8Array(this.result);
                e(t);
              }),
              (r.onerror = function (e) {
                n(e);
              });
          });
        return (
          (t.key = await window.crypto.subtle.generateKey(
            { name: "AES-GCM", length: 128 },
            !0,
            ["encrypt"]
          )),
          (t.iv = window.crypto.getRandomValues(new Uint8Array(12))),
          this.setState({ message: "Encrypting..." }),
          (t.encrypted = await window.crypto.subtle.encrypt(
            { name: "AES-GCM", iv: t.iv, tagLength: 128 },
            t.key,
            n
          )),
          (t.keydata = await window.crypto.subtle.exportKey("jwk", t.key)),
          t
        );
      }
      handleProgressUpdate(e) {
        var t = Math.round((100 * e.loaded) / e.total);
        this.setState({ percent: t });
      }
      uploadFile(e) {
        this.setState({ message: "Uploading..." });
        const t = (function (e) {
            let t = "";
            for (let n in e)
              e[n] < 16
                ? (t += "0" + e[n].toString(16))
                : (t += e[n].toString(16));
            return t;
          })(e.iv),
          n = new DataView(e.encrypted),
          r = new Blob([n], { type: e.file.type });
        var l = new FormData();
        l.append("data", r, e.file.name);
        const o = {
          onUploadProgress: this.handleProgressUpdate,
          headers: {
            "X-File-Metadata": JSON.stringify({
              id: t,
              filename: encodeURIComponent(e.file.name),
            }),
          },
        };
        a.post("/api/upload", l, o)
          .then((t) => {
            this.setState({
              action: "uploadDone",
              url: t.data.url,
              id: t.data.id,
              passPhrase: t.data.passPhrase,
              secretKey: e.keydata.k,
              deleteToken: t.data.delete,
            });
          })
          .catch(() =>
            this.setState({
              errorMessage: "500 server error.",
              action: "error",
            })
          );
      }
      async encryptAndUpload(e) {
        this.setState({ action: "uploadProgress" });
        const t = await this.encrypt(e);
        await this.uploadFile(t);
      }
      render() {
        return "uploadProgress" == this.state.action
          ? e.createElement(c, {
              percent: this.state.percent,
              message: this.state.message,
            })
          : "uploadDone" == this.state.action
          ? e.createElement(u, {
              downloadURL: this.state.url,
              secretKey: this.state.secretKey,
              passPhrase: this.state.passPhrase,
              deleteToken: this.state.deleteToken,
              id: this.state.id,
            })
          : "error" == this.state.action
          ? e.createElement(i, { errorMessage: this.state.errorMessage })
          : e.createElement(f, { encryptAndUpload: this.encryptAndUpload });
      }
    }
    class p extends e.Component {
      constructor(e) {
        super(e),
          (this.state = { textValue: "" }),
          (this.handleTextChange = this.handleTextChange.bind(this));
      }
      handleClick() {
        this.props.startDownload(this.state.textValue);
      }
      handleTextChange(e) {
        this.setState({ textValue: e.target.value });
      }
      render() {
        return e.createElement(
          "div",
          null,
          e.createElement(
            "div",
            { className: "header-info" },
            e.createElement("h1", null, "Download ", this.state.filename),
            e.createElement("img", {
              src: "/download.svg",
              style: {
                float: "right",
                paddingBottom: "1rem",
                paddingLeft: "1rem",
              },
            }),
            e.createElement(
              "p",
              null,
              "Your friend is sending you a message with Send, a service that allows you to share files with a safe, private, and encrypted link that automatically expires to ensure your stuff does not remain online forever."
            )
          ),
          e.createElement("p", { className: "text-center" }),
          e.createElement(
            "div",
            { className: "form-group" },
            e.createElement(
              "p",
              { style: { color: "red" } },
              this.props.errorMessage
            ),
            e.createElement("input", {
              type: "text",
              className: "form-control input-text",
              placeholder: "enter passphrase",
              onChange: this.handleTextChange,
            })
          ),
          e.createElement(
            "div",
            { className: "text-center btn-width" },
            e.createElement(
              "button",
              {
                type: "button",
                className: "btn btn-primary btn-block",
                onClick: () => this.handleClick(),
              },
              "Download"
            )
          )
        );
      }
    }
    p.propTypes = { startDownload: r.func, errorMessage: r.string };
    class h extends e.Component {
      render() {
        return e.createElement(
          "div",
          { className: "form-group" },
          e.createElement("textarea", {
            className: "form-control",
            id: "textInput",
            rows: "3",
            defaultValue: this.props.privatemessage,
          })
        );
      }
    }
    h.propTypes = { privatemessage: r.string };
    class m extends e.Component {
      constructor(e) {
        super(e), (this.state = {});
      }
      goHome() {
        window.location.href = "/";
      }
      render() {
        var t = "";
        return (
          this.props.privateMessage &&
            (t = e.createElement(h, {
              privatemessage: this.props.privateMessage,
            })),
          e.createElement(
            "div",
            null,
            e.createElement("h3", null, "Download Complete"),
            t,
            e.createElement(
              "div",
              null,
              e.createElement(
                "button",
                {
                  className: "btn btn-primary",
                  type: "button",
                  onClick: () => this.goHome(),
                },
                "Send Another"
              )
            )
          )
        );
      }
    }
    m.propTypes = { privateMessage: r.string };
    class g extends e.Component {
      constructor(e) {
        super(e),
          (this.state = {
            action: "downloadPage",
            message: "Downloading...",
            percent: 0,
            errorMessage: "",
          }),
          this.getFileInfo(),
          (this.startDownload = this.startDownload.bind(this)),
          (this.updateProgress = this.updateProgress.bind(this));
      }
      getFileInfo() {
        var e = (e) => {
            this.setState({ filename: e.filename, iv: e.id, type: e.mimeType });
          },
          t = () => {
            this.setState({ action: "downloadExpired" });
          };
        a.get("/api/exists/" + this.props.fileID)
          .then(function (t) {
            var n = JSON.parse(t.headers["x-file-metadata"]);
            (n.filename = decodeURIComponent(n.filename)), e(n);
          })
          .catch(function () {
            t();
          });
      }
      updateProgress() {
        var e = Math.round((100 * event.loaded) / event.total);
        this.setState({ percent: e });
      }
      startDownload(e) {
        if (!e)
          return void this.setState({
            action: "download",
            errorMessage: "Passphrase is required.",
          });
        this.setState({
          action: "downloadProgress",
          message: "Downloading...",
        });
        const t = {
          onDownloadProgress: this.updateProgress,
          responseType: "blob",
          headers: { "X-File-Metadata": JSON.stringify({ passPhrase: e }) },
        };
        a.get("/api/download/" + this.props.fileID, t)
          .then((e) => {
            this.setState({ percent: 100 }), this.decryptFileAndSave(e.data);
          })
          .catch((e) =>
            401 === e.response.status
              ? void this.setState({
                  action: "download",
                  errorMessage: "Incorrect passphrase, try again.",
                })
              : 404 === e.response.status
              ? void this.setState({ action: "downloadExpired" })
              : void this.setState({
                  action: "error",
                  errorMessage: "An error occurred downloading the file.",
                })
          );
      }
      async decryptFileAndSave(e) {
        const t = await this.decryptFile(e),
          n = this.convertPlainText(t);
        null !== n
          ? this.setState({
              message: "Complete",
              action: "downloadComplete",
              privateMessage: n,
            })
          : (this.saveFile(t), this.setState({ action: "downloadComplete" }));
      }
      saveFile(e) {
        const t = new DataView(e),
          n = new Blob([t], { type: this.type }),
          r = URL.createObjectURL(n);
        if (window.navigator.msSaveBlob)
          return window.navigator.msSaveBlob(n, this.filename);
        const a = document.createElement("a");
        (a.href = r),
          (a.download = this.state.filename),
          document.body.appendChild(a),
          a.click(),
          URL.revokeObjectURL(r);
      }
      convertPlainText(e) {
        return "text/plain" === this.state.type
          ? new TextDecoder().decode(e)
          : null;
      }
      async decryptFile(e) {
        this.setState({ message: "Decrypting..." });
        var t = await window.crypto.subtle
            .importKey(
              "jwk",
              { k: this.props.secretKey, kty: "oct", alg: "A128GCM", ext: !0 },
              { name: "AES-GCM" },
              !1,
              ["decrypt"]
            )
            .catch((e) => this.setState({ action: "error", errorMessage: e })),
          n = await new Promise((t, n) => {
            const r = new FileReader();
            (r.onload = function () {
              t(r.result);
            }),
              r.readAsArrayBuffer(e),
              (r.onerror = function (e) {
                n(e);
              });
          }).catch((e) => this.setState({ action: "error", errorMessage: e }));
        return await window.crypto.subtle
          .decrypt(
            { name: "AES-GCM", iv: l(this.state.iv), tagLength: 128 },
            t,
            n
          )
          .catch((e) => this.setState({ action: "error", errorMessage: e }));
      }
      render() {
        return "downloadProgress" === this.state.action
          ? e.createElement(c, {
              percent: this.state.percent,
              message: this.state.message,
            })
          : "downloadComplete" === this.state.action
          ? e.createElement(m, { privateMessage: this.state.privateMessage })
          : "downloadExpired" === this.state.action
          ? e.createElement(s, null)
          : "error" === this.state.action
          ? e.createElement(i, { errorMessage: this.state.errorMessage })
          : e.createElement(p, {
              filename: this.state.filename,
              startDownload: this.startDownload,
              errorMessage: this.state.errorMessage,
            });
      }
    }
    g.propTypes = { fileID: r.string, secretKey: r.string };
    const y = () =>
      e.createElement(
        "header",
        null,
        e.createElement(
          "div",
          { className: "head" },
          e.createElement(
            "h1",
            null,
            e.createElement(
              "a",
              { href: "/" },
              e.createElement("img", {
                src: "/sendsafe-logo.svg",
                title: "send-safe",
              })
            )
          )
        )
      );
    t.render(
      e.createElement(
        () =>
          e.createElement(
            "div",
            null,
            e.createElement(y, null),
            e.createElement(
              "div",
              { className: "container" },
              e.createElement(
                "div",
                { className: "row" },
                e.createElement(
                  "div",
                  { className: "col" },
                  e.createElement(o, null)
                )
              )
            )
          ),
        null
      ),
      document.getElementById("root")
    );
  })();
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
